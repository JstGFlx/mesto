(()=>{"use strict";class e{constructor(e,t){this.setButtonState=()=>{this._checkInvalidInput()?(this._button.classList.add(this._inactiveButton),this._button.disabled=!0):(this._button.classList.remove(this._inactiveButton),this._button.disabled=!1)},this.resetValidityMassage=()=>{this._inputList.forEach((e=>{e.classList.remove(this._inputError)})),this._errors.forEach((e=>{e.textContent=""}))},this._form=document.querySelector(`form[name=${t}]`),this._input=e.inputSelector,this._submitButton=e.submitButtonSelector,this._inactiveButton=e.inactiveButtonClass,this._inputError=e.inputErrorClass,this._errors=this._form.querySelectorAll(e.errorClass),this._inputList=[...this._form.querySelectorAll(this._input)],this._button=this._form.querySelector(this._submitButton)}_showError(e){this._error=this._form.querySelector(`#${e.id}-error`),this._error.textContent=e.validationMessage,e.classList.add(this._inputError)}_hideError(e){this._error=this._form.querySelector(`#${e.id}-error`),this._error.textContent="",e.classList.remove(this._inputError)}_checkInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_setEventListener(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.setButtonState()}))}))}reseteInputsValues(){this._inputList.forEach((e=>{e.value=""}))}enableValidation(){this._setEventListener(),this.setButtonState()}}class t{constructor({name:e,link:t,likes:s,_id:i,owner:r},o,n,a,h,_,u,p){this._title=e,this._image=t,this._id=i,this._owner=r,this._template=document.querySelector(o),this._openPopupView=a,this._openPopupDelete=h,this._putLikeCard=_,this._deleteLike=u,this._likes=s,this._myId=n,this._showErrorMassage=p,this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".card__image"),this._elementDesc=this._element.querySelector(".card__name"),this._elementBtnDelete=this._element.querySelector(".btn_type_delete"),this._likeButton=this._element.querySelector(".card__like"),this._likeCounter=this._element.querySelector(".card__like-counter")}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_toggleLikeTheCard(e,t){this._checkMyLike()?this._deleteLike(t).then((t=>{this._likes=t.likes,this._likeCounter.textContent=t.likes.length,e.target.classList.toggle("card__like_active")})).catch((e=>{this._showErrorMassage(e)})):this._putLikeCard(t).then((t=>{this._likes=t.likes,this._likeCounter.textContent=t.likes.length,e.target.classList.toggle("card__like_active")})).catch((e=>{this._showErrorMassage(e)}))}_checkMyLike(){return this._likes.some((e=>e._id===this._myId))}generateCard(){return this._elementImage.src=this._image,this._elementImage.alt=this._title,this._elementDesc.textContent=this._title,this._likeCounter.textContent=this._likes.length,this._setEventListeners(),this._owner._id===this._myId&&this._elementBtnDelete.classList.add("btn_visible"),this._checkMyLike()&&this._likeButton.classList.add("card__like_active"),this._element}_setEventListeners(){this._elementImage.addEventListener("click",(()=>{this._openPopupView(this._image,this._title)})),this._likeButton.addEventListener("click",(e=>{this._toggleLikeTheCard(e,this._id,this._likes)})),this._elementBtnDelete.addEventListener("click",(()=>{this._openPopupDelete(this._element,this._id)}))}}class s{constructor(e){this.closePopup=()=>{this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._closeByEscape)},this._closeByEscape=e=>{27===e.keyCode&&this.closePopup()},this._popup=document.querySelector(e)}openPopup(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._closeByEscape)}_closeByClick(e){e.target.classList.contains("popup_opened")&&this.closePopup()}setEventListeners(){this._popup.querySelector(".btn_type_close").addEventListener("click",this.closePopup),this._popup.addEventListener("mousedown",(e=>this._closeByClick(e)))}}class i extends s{constructor({submitForm:e},t,s){super(t),this.setEventListeners=()=>{super.setEventListeners(),this._form=this._popup.querySelector(".popup__form"),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitForm(this._getInputValues())}))},this._submitForm=e,this._inputList=this._popup.querySelectorAll(".popup__input"),this._resetValidityMassage=s}setInitialInputsValues(e){this._inputList.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}closePopup(){super.closePopup(),this._form.reset(),this._resetValidityMassage()}}const r={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:".popup__error"},o=document.querySelector(".btn_type_edit"),n=document.querySelector(".btn_type_add"),a=document.querySelector(".profile__avatar"),h=document.querySelector(".popup__button_type_edit"),_=document.querySelector(".popup__button_type_edit-avatar"),u=document.querySelector(".popup__button_type_add"),p=document.querySelector(".popup__button_type_delete"),l=document.querySelector(".error__template"),c=document.querySelector(".errors");function d(e,t){t.textContent=e?"Сохранение...":"Сохранить"}function m(e){u.textContent=e?"Создание...":"Создать"}function y(e){p.textContent=e?"Удаление...":"Да"}function f(e){const t=function(e){const t=l.content.querySelector(".error").cloneNode(!0);return t.querySelector(".error__massage").textContent=`${e}. Что-то пошло не так :(`,t}(e);c.prepend(t),new Promise((e=>{setTimeout((()=>{t.classList.add("popup_opened"),e(t)}),0)})).then((e=>new Promise((t=>{setTimeout((()=>{!function(e){e.classList.remove("popup_opened")}(e),t(e)}),5e3)})))).then((e=>{setTimeout((()=>{e.remove()}),1e3)}))}let L;const v=new e(r,"edit-profile"),b=new e(r,"add-new-card"),k=new e(r,"change-avatar"),E=new class{constructor({baseUrl:e,headers:t},s,i,r,o,n){this.patchAvatar=e=>(this._renderLoadTextBtnEdit(!0,this._btnSubmitEditAvatar),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))),this.deleteCard=e=>(this._renderLoadTextBtnDelete(!0),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authorization}}).then((e=>e.ok?e:Promise.reject(`Ошибка: ${e.status}`)))),this.putLikeCard=e=>fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`))),this.deleteLike=e=>fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`))),this._baseUrl=e,this._authorization=t.authorization,this._contentType=t["Content-Type"],this._renderLoadTextBtnEdit=s,this._renderLoadTextBtnAdd=i,this._renderLoadTextBtnDelete=r,this._btnSubmitEdit=o,this._btnSubmitEditAvatar=n}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}pathUserInfo({name:e,about:t}){return this._renderLoadTextBtnEdit(!0,this._btnSubmitEdit),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}postNewCard({name:e,link:t}){return this._renderLoadTextBtnAdd(!0),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-20",headers:{authorization:"79accf8f-cc76-4033-84f9-2d1d81c30157","Content-Type":"application/json"}},d,m,y,h,_),g=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}appendItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}({renderer:e=>{const t=S(e);g.appendItem(t.generateCard())}},".cards");E.getInitialCards().then((e=>{g.renderItems(e)})).catch((e=>{f(e)})),E.getUserInfo().then((e=>{L=e._id,w.setUserInfo(e)})).catch((e=>{f(e)}));const C=new i({submitForm:e=>{E.postNewCard(e).then((e=>{const t=S(e);g.prependItem(t.generateCard())})).catch((e=>{f(e)})).finally((()=>{m(!1),C.closePopup()}))}},".popup_type_add",b.resetValidityMassage);function S(e){return new t(e,".template",L,B.openPopup,q.openPopup,E.putLikeCard,E.deleteLike,f)}const I=new i({submitForm:e=>{E.pathUserInfo(e).then((e=>{w.setUserInfo(e)})).catch((e=>{f(e)})).finally((()=>{d(!1,h),I.closePopup()}))}},".popup_type_edit",v.resetValidityMassage),P=new i({submitForm:e=>{E.patchAvatar(e.link).then((e=>{w.setUserInfo(e)})).catch((e=>{f(e)})).finally((()=>{P.closePopup(),d(!1,_)}))}},".popup_type_avatar",k.resetValidityMassage),B=new class extends s{constructor(e){super(e),this.openPopup=(e,t)=>{super.openPopup(),this._image.src=e,this._desc.textContent=t,this._image.alt=t},this._image=this._popup.querySelector(".popup__image"),this._desc=this._popup.querySelector(".popup__description")}}(".popup_type_img"),q=new class extends s{constructor(e,t,s,i){super(e),this.setEventListeners=()=>{super.setEventListeners(),this._buttonDelete.addEventListener("click",(()=>{this._deleteCard()}))},this.openPopup=(e,t)=>{super.openPopup(),this._card=e,this._id=t},this._handleDeleteCard=t,this._buttonDelete=this._popup.querySelector(".popup__button"),this._renderLoadTextBtnDelete=s,this._showErrorMassage=i}_deleteCard(){this._renderLoadTextBtnDelete(!0),this._handleDeleteCard(this._id).catch((e=>{this._showErrorMassage(e)})).finally((()=>{this._renderLoadTextBtnDelete(!1),this._card.remove(),this.closePopup()}))}}(".popup_type_delete",E.deleteCard,y,f),w=new class{constructor({name:e,about:t,avatar:s}){this.getUserInfo=()=>(this._profileValues={},this._profileValues.name=this._profileName.textContent,this._profileValues.about=this._profileAbout.textContent,this._profileValues),this.setUserInfo=({name:e,about:t,avatar:s})=>{this._profileName.textContent=e,this._profileAbout.textContent=t,this._profileAvatar.style.backgroundImage=`url(${s})`},this._profileName=document.querySelector(e),this._profileAbout=document.querySelector(t),this._profileAvatar=document.querySelector(s)}}({name:".profile__name",about:".profile__about-me",avatar:".profile__avatar"});I.setEventListeners(),C.setEventListeners(),B.setEventListeners(),q.setEventListeners(),P.setEventListeners(),v.enableValidation(),b.enableValidation(),k.enableValidation(),o.addEventListener("click",(()=>{I.setInitialInputsValues(w.getUserInfo()),v.resetValidityMassage(),v.setButtonState(),I.openPopup()})),n.addEventListener("click",(()=>{b.resetValidityMassage(),b.reseteInputsValues(),b.setButtonState(),C.openPopup()})),a.addEventListener("click",(()=>{k.reseteInputsValues(),k.resetValidityMassage(),k.setButtonState(),P.openPopup()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,