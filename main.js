(()=>{"use strict";class e{constructor(e,t){this.setButtonState=()=>{this._checkInvalidInput()?(this._button.classList.add(this._inactiveButton),this._button.disabled=!0):(this._button.classList.remove(this._inactiveButton),this._button.disabled=!1)},this.resetValidityMassage=()=>{this._inputList.forEach((e=>{e.classList.remove(this._inputError)})),this._errors.forEach((e=>{e.textContent=""}))},this._form=document.querySelector(`form[name=${t}]`),this._input=e.inputSelector,this._submitButton=e.submitButtonSelector,this._inactiveButton=e.inactiveButtonClass,this._inputError=e.inputErrorClass,this._errors=this._form.querySelectorAll(e.errorClass),this._inputList=[...this._form.querySelectorAll(this._input)],this._button=this._form.querySelector(this._submitButton)}_showError(e){this._error=this._form.querySelector(`#${e.id}-error`),this._error.textContent=e.validationMessage,e.classList.add(this._inputError)}_hideError(e){this._error=this._form.querySelector(`#${e.id}-error`),this._error.textContent="",e.classList.remove(this._inputError)}_checkInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_setEventListener(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.setButtonState()}))}))}reseteInputsValues(){this._inputList.forEach((e=>{e.value=""}))}enableValidation(){this._setEventListener(),this.setButtonState()}}class t{constructor({name:e,link:t,likes:s,_id:i,owner:r},n,o,{handleImageClick:a,handleDeleteClick:h,handleLikeClick:l}){this._deleteTheLike=e=>{this._likes=e.likes,this._likeCounter.textContent=e.likes.length,this._likeButton.classList.remove("card__like_active")},this._addTheLike=e=>{this._likes=e.likes,this._likeCounter.textContent=e.likes.length,this._likeButton.classList.add("card__like_active")},this._checkMyLike=()=>this._likes.some((e=>e._id===this._myId)),this._title=e,this._image=t,this._id=i,this._owner=r,this._template=document.querySelector(n),this._likes=s,this._myId=o,this._handleImageClick=a,this._handleDeleteClick=h,this._handleLikeClick=l,this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".card__image"),this._elementDesc=this._element.querySelector(".card__name"),this._elementBtnDelete=this._element.querySelector(".btn_type_delete"),this._likeButton=this._element.querySelector(".card__like"),this._likeCounter=this._element.querySelector(".card__like-counter")}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}generateCard(){return this._elementImage.src=this._image,this._elementImage.alt=this._title,this._elementDesc.textContent=this._title,this._likeCounter.textContent=this._likes.length,this._setEventListeners(),this._owner._id===this._myId&&this._elementBtnDelete.classList.add("btn_visible"),this._checkMyLike()&&this._likeButton.classList.add("card__like_active"),this._element}_setEventListeners(){this._elementImage.addEventListener("click",(()=>{this._handleImageClick(this._image,this._title)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._checkMyLike(),this._id,this._deleteTheLike,this._addTheLike)})),this._elementBtnDelete.addEventListener("click",(()=>{this._handleDeleteClick(this._element,this._id)}))}}class s{constructor(e){this.closePopup=()=>{this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._closeByEscape)},this._closeByEscape=e=>{"Escape"==e.key&&this.closePopup()},this._popup=document.querySelector(e)}openPopup(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._closeByEscape)}_closeByClick(e){e.target.classList.contains("popup_opened")&&this.closePopup()}setEventListeners(){this._popup.querySelector(".btn_type_close").addEventListener("click",this.closePopup),this._popup.addEventListener("mousedown",(e=>this._closeByClick(e)))}}class i extends s{constructor({submitForm:e},t){super(t),this.setEventListeners=()=>{super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitForm(this._getInputValues())}))},this._submitForm=e,this._inputList=this._popup.querySelectorAll(".popup__input"),this._form=this._popup.querySelector(".popup__form")}setInitialInputsValues(e){this._inputList.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}}const r={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:".popup__error"},n=document.querySelector(".btn_type_edit"),o=document.querySelector(".btn_type_add"),a=document.querySelector(".profile__avatar"),h=document.querySelector(".popup__button_type_edit"),l=document.querySelector(".popup__button_type_edit-avatar"),_=document.querySelector(".popup__button_type_add"),u=document.querySelector(".popup__button_type_delete"),p=document.querySelector(".error__template"),c=document.querySelector(".errors"),d=document.querySelectorAll(".load-wraper");function m(e){e?d.forEach((e=>{e.classList.add("display")})):(d.forEach((e=>{e.classList.remove("display")})),a.classList.add("display"))}function y(e,t){t.textContent=e?"Сохранение...":"Сохранить"}function k(e){_.textContent=e?"Создание...":"Создать"}function L(e){u.textContent=e?"Удаление...":"Да"}function f(e){const t=function(e){const t=p.content.querySelector(".error").cloneNode(!0);return t.querySelector(".error__massage").textContent=`${e}. Что-то пошло не так :(`,t}(e);c.prepend(t),new Promise((e=>{setTimeout((()=>{t.classList.add("popup_opened"),e(t)}),0)})).then((e=>new Promise((t=>{setTimeout((()=>{!function(e){e.classList.remove("popup_opened")}(e),t(e)}),5e3)})))).then((e=>{setTimeout((()=>{e.remove()}),1e3)}))}let v;const b=new e(r,"edit-profile"),E=new e(r,"add-new-card"),C=new e(r,"change-avatar"),S=new class{constructor({baseUrl:e,headers:t},s,i,r,n,o,a){this.patchAvatar=e=>(this._renderLoadTextBtnEdit(!0,this._btnSubmitEditAvatar),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))),this.deleteCard=e=>(this._renderLoadTextBtnDelete(!0),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authorization}}).then((e=>e.ok?e:Promise.reject(`Ошибка: ${e.status}`)))),this.putLikeCard=e=>fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`))),this.deleteLike=e=>fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`))),this._baseUrl=e,this._authorization=t.authorization,this._contentType=t["Content-Type"],this._renderLoadTextBtnEdit=s,this._renderLoadTextBtnAdd=i,this._renderLoadTextBtnDelete=r,this._displayLoadWrapper=n,this._btnSubmitEdit=o,this._btnSubmitEditAvatar=a}getInitialCards(){return this._displayLoadWrapper(!0),fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}getUserInfo(){return this._displayLoadWrapper(!0),fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}pathUserInfo(e){return this._renderLoadTextBtnEdit(!0,this._btnSubmitEdit),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}postNewCard(e){return this._renderLoadTextBtnAdd(!0),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"Content-Type":this._contentType},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)))}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-20",headers:{authorization:"79accf8f-cc76-4033-84f9-2d1d81c30157","Content-Type":"application/json"}},y,k,L,m,h,l);Promise.all([S.getUserInfo(),S.getInitialCards()]).then((([e,t])=>{v=e._id,x.setUserInfo(e),g.renderItems(t)})).catch((e=>{f(e)})).finally((()=>{m(!1)}));const g=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}appendItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}({renderer:e=>{const t=I(e);g.appendItem(t.generateCard())}},".cards"),I=e=>new t(e,".template",v,{handleImageClick:(e,t)=>{T.openPopup(e,t)},handleDeleteClick:(e,t)=>{w.openPopup(e,t)},handleLikeClick:(e,t,s,i)=>{e?S.deleteLike(t).then((e=>{s(e)})).catch((e=>{f(e)})):S.putLikeCard(t).then((e=>{i(e)})).catch((e=>{f(e)}))}}),q=new i({submitForm:e=>{S.postNewCard(e).then((e=>{const t=I(e);g.prependItem(t.generateCard())})).catch((e=>{f(e)})).finally((()=>{k(!1),q.closePopup()}))}},".popup_type_add"),B=new i({submitForm:e=>{S.pathUserInfo(e).then((e=>{x.setUserInfo(e)})).catch((e=>{f(e)})).finally((()=>{y(!1,h),B.closePopup()}))}},".popup_type_edit"),P=new i({submitForm:e=>{S.patchAvatar(e.link).then((e=>{x.setUserInfo(e)})).catch((e=>{f(e)})).finally((()=>{P.closePopup(),y(!1,l)}))}},".popup_type_avatar"),T=new class extends s{constructor(e){super(e),this.openPopup=(e,t)=>{super.openPopup(),this._image.src=e,this._desc.textContent=t,this._image.alt=t},this._image=this._popup.querySelector(".popup__image"),this._desc=this._popup.querySelector(".popup__description")}}(".popup_type_img"),w=new class extends s{constructor(e,{handleDeleteCard:t}){super(e),this.setEventListeners=()=>{super.setEventListeners(),this._buttonDelete.addEventListener("click",(()=>{this._handleDeleteCard(this._id,this._card)}))},this.openPopup=(e,t)=>{super.openPopup(),this._card=e,this._id=t},this._handleDeleteCard=t,this._buttonDelete=this._popup.querySelector(".popup__button")}}(".popup_type_delete",{handleDeleteCard:(e,t)=>{L(!0),S.deleteCard(e).catch((e=>{f(e)})).finally((()=>{L(!1),t.remove(),w.closePopup()}))}}),x=new class{constructor({name:e,about:t,avatar:s}){this.getUserInfo=()=>(this._profileValues={},this._profileValues.name=this._profileName.textContent,this._profileValues.about=this._profileAbout.textContent,this._profileValues),this.setUserInfo=({name:e,about:t,avatar:s})=>{this._profileName.textContent=e,this._profileAbout.textContent=t,this._profileAvatar.style.backgroundImage=`url(${s})`},this._profileName=document.querySelector(e),this._profileAbout=document.querySelector(t),this._profileAvatar=document.querySelector(s)}}({name:".profile__name",about:".profile__about-me",avatar:".profile__avatar"});B.setEventListeners(),q.setEventListeners(),T.setEventListeners(),w.setEventListeners(),P.setEventListeners(),b.enableValidation(),E.enableValidation(),C.enableValidation(),n.addEventListener("click",(()=>{B.setInitialInputsValues(x.getUserInfo()),b.resetValidityMassage(),b.setButtonState(),B.openPopup()})),o.addEventListener("click",(()=>{E.resetValidityMassage(),E.reseteInputsValues(),E.setButtonState(),q.openPopup()})),a.addEventListener("click",(()=>{C.reseteInputsValues(),C.resetValidityMassage(),C.setButtonState(),P.openPopup()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,